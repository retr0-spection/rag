name: CI/CD Pipeline with Terraform

on:
  push:
    branches:
      - main # Only run on pushes to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 3: Build Docker image
      - name: Build Docker image
        run: docker build --cache-from ${{ secrets.DOCKER_USERNAME }}/aurora-rag-server:latest -t ${{ secrets.DOCKER_USERNAME }}/aurora-rag-server:${{ github.sha }} .

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/aurora-rag-server:${{ github.sha }}

      # Step 5: Tag Docker image as latest
      - name: Tag image as latest
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/aurora-rag-server:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/aurora-rag-server:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/aurora-rag-server:latest

      # Step 6: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      # Step 7: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      # Step 8: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: infra/terraform # Path to Terraform files

      - name: Remove TG
        run: terraform state rm aws_lb_target_group.rag_tg
        working-directory: infra/terraform

      - name: Terraform Import Existing Target Group
        run: terraform import aws_lb_target_group.rag_tg arn:aws:elasticloadbalancing:af-south-1:533266983761:targetgroup/RagTG/c7d4270c41aac69e # Replace <target_group_arn> with the actual ARN
        working-directory: infra/terraform

      # Step 9: Terraform Refresh
      - name: Terraform Refresh
        run: terraform refresh
        working-directory: infra/terraform # Path to Terraform files

      # Step 10: Destroy Existing Instance (Optional)
      - name: Terraform Destroy Existing Instance
        working-directory: infra/terraform
        run: terraform destroy -auto-approve -target=aws_instance.app_server

      # Step 11: Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan
        working-directory: infra/terraform # Path to Terraform files

      # Step 12: Terraform Apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: infra/terraform # Path to Terraform files
